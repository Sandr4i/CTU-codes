public class ParkPlannerOptimized {
    public static int maximizeForestedArea(int[][] grid, int K, int S, int L) {
        int N = grid.length;
        int maxForested = 0;

        // Vytvoření kumulativního součtu zalesněných polí
        int[][] cumulativeSum = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                cumulativeSum[i][j] = cumulativeSum[i - 1][j] + cumulativeSum[i][j - 1] - cumulativeSum[i - 1][j - 1];
                if (grid[i - 1][j - 1] == 1) {
                    cumulativeSum[i][j]++;
                }
            }
        }

        for (int i = 0; i <= N - K; i++) {
            for (int j = 0; j <= N - K; j++) {
                int forested = cumulativeSum[i + K][j + K] - cumulativeSum[i][j + K] - cumulativeSum[i + K][j] + cumulativeSum[i][j];
                int centralRockCount = 0;

                if (isCentral(L, i, j, K, i + K - 1, j + K - 1, N)) {
                    centralRockCount = cumulativeSum[i + K - L][j + K - L] - cumulativeSum[i + L][j + K - L] - cumulativeSum[i + K - L][j + L] + cumulativeSum[i + L][j + L];
                }

                if (centralRockCount >= S) {
                    maxForested = Math.max(maxForested, forested);
                }
            }
        }

        return maxForested;
    }

    public static boolean isCentral(int L, int startX, int startY, int K, int endX, int endY, int N) {
        int centerStartX = startX + L;
        int centerStartY = startY + L;
        int centerEndX = endX - L;
        int centerEndY = endY - L;

        return centerStartX <= centerEndX && centerStartY <= centerEndY;
    }

    public static void main(String[] args) {
        int N = 5; // Rozměr mřížky
        int K = 3; // Rozměr parku
        int S = 2; // Počet skal v centrální části
        int L = 1; // Vzdálenost od okraje

        int[][] grid = {
            {1, 2, 1, 0, 1},
            {0, 1, 1, 2, 0},
            {1, 0, 0, 1, 2},
            {1, 1, 1, 0, 0},
            {2, 1, 2, 1, 1}
        };

        int maxForested = maximizeForestedArea(grid, K, S, L);
        System.out.println("Maximální počet zalesněných polí: " + maxForested);
    }
}

